/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package form.dialog.ocena;

import components.TableModelKurs;
import controller.Communication;
import domain.Clanstvo;
import domain.Kurs;
import domain.Polaznik;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author Sofija Nedeljkovic
 */
public class SviKursevi extends javax.swing.JDialog {

    Polaznik p;
    ArrayList<Clanstvo> clanstva;
    boolean flag = false;
    
    /**
     * Creates new form SviKursevi
     */
    public SviKursevi(java.awt.Frame parent, boolean modal, Polaznik p) {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(null);
        tableKur.setModel(new TableModelKurs());
        this.p = p;
        popuniClanstva();
        popuniTabelu();
        
       
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tableKur = new javax.swing.JTable();
        btnOceni = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        cmbOcena = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        tableKur.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tableKur);

        btnOceni.setText("OCENI");
        btnOceni.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOceniActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel1.setText("OCENI MOJE KURSEVE");

        cmbOcena.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(cmbOcena, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnOceni))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 433, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(150, 150, 150)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(23, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnOceni)
                    .addComponent(cmbOcena, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(28, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnOceniActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOceniActionPerformed
        // TODO add your handling code here:
        int selected = tableKur.getSelectedRow();
        
        if(selected >=0){
        
            
            if(flag){
        
            
                TableModelKurs tmk = (TableModelKurs) tableKur.getModel();
                int ocena = Integer.parseInt((String)cmbOcena.getSelectedItem());
                Kurs k = tmk.vratiKurs(selected);
                 JOptionPane.showMessageDialog(this, "Sistem je učitao kurs.");
                for (Clanstvo clanstvo : clanstva) {
                    if(clanstvo.getGrupa().getKurs().getKursID()==k.getKursID()){
                    
                        if(clanstvo.getStatus().equals("PAO/LA") || clanstvo.getStatus().equals("POLOZIO/LA") || 
                            clanstvo.getStatus().equals("ZAVRSIO/LA")){
                        try {
                            clanstvo.setOcena(ocena);
                            Object o = Communication.getInstance().updateClanstvo(clanstvo);
                            if(!(boolean)o){
                            
                                JOptionPane.showMessageDialog(this, "Sistem ne može da izmeni ocenu.");
                            }else{
                            
                                 JOptionPane.showMessageDialog(this, "Sistem je izmenio ocenu.");
                            }
                        } catch (IOException ex) {
                            Logger.getLogger(SviKursevi.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        }else{
                        
                            JOptionPane.showMessageDialog(this, "Niste zavrsili kurs pa ne mozete da ga ocenite.");
                        }
                    }
                }
            
        
            }else{
        
            JOptionPane.showMessageDialog(this, "Niste jos zavrsili ni jedan kurs, ne mozete oceniti");
        
            }
            
        }else{
        
            JOptionPane.showMessageDialog(this, "Sistem ne može da učita kurs. Niste izabrali kurs.");
        }
    }//GEN-LAST:event_btnOceniActionPerformed

    /**
     * @param args the command line arguments
     */
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnOceni;
    private javax.swing.JComboBox<String> cmbOcena;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tableKur;
    // End of variables declaration//GEN-END:variables

    private void popuniClanstva() {
        
        try {
            ArrayList<Clanstvo> svaCl = Communication.getInstance().getAllClanstvo();
            clanstva = new ArrayList<>();
            for (Clanstvo clanstvo : svaCl) {
                if(clanstvo.getPolaznik().getPolaznikID()==p.getPolaznikID()){
                
                    clanstva.add(clanstvo);
                    if(clanstvo.getStatus().equals("PAO/LA") || clanstvo.getStatus().equals("POLOZIO/LA") || 
                            clanstvo.getStatus().equals("ZAVRSIO/LA")){
                    
                        flag = true;
                    }
                }
            }
            
            if(clanstva.isEmpty()){
            
                JOptionPane.showMessageDialog(this, "Niste jos ni u jednoj grupi, niti pohadjate neki kurs.");
                this.dispose();
            }
        } catch (IOException ex) {
            Logger.getLogger(SviKursevi.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void popuniTabelu() {
        
            ArrayList<Kurs> kursevi = new ArrayList<>();
            for (Clanstvo cl : clanstva) {
                kursevi.add(cl.getGrupa().getKurs());
            }
            if(kursevi.isEmpty()){
            
                JOptionPane.showMessageDialog(this, "Sistem ne može da nađe kurseve po zadatoj vrednosti.");
            }
            TableModelKurs tmk = (TableModelKurs) tableKur.getModel();
            tmk.dodajKurseve(kursevi);
            
       
        
    }
}
